// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct C_SkillDataTR : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static C_SkillDataTR GetRootAsC_SkillDataTR(ByteBuffer _bb) { return GetRootAsC_SkillDataTR(_bb, new C_SkillDataTR()); }
  public static C_SkillDataTR GetRootAsC_SkillDataTR(ByteBuffer _bb, C_SkillDataTR obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public C_SkillDataTR __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int _id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public string Description { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(8); }
  public int CoolTime { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CostSP { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float AttackDistance { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float AttackAngle { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string AttackTargetTags(int j) { int o = __p.__offset(18); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AttackTargetTagsLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string ImpactType(int j) { int o = __p.__offset(20); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ImpactTypeLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int NextBattlerId { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float AtkRatio { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float DurationTime { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float AtkInterval { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string SkillPrefab { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillPrefabBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetSkillPrefabBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetSkillPrefabArray() { return __p.__vector_as_array<byte>(30); }
  public string AnimationName { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAnimationNameBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetAnimationNameBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetAnimationNameArray() { return __p.__vector_as_array<byte>(32); }
  public string HitFxPrefab { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHitFxPrefabBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetHitFxPrefabBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetHitFxPrefabArray() { return __p.__vector_as_array<byte>(34); }
  public int Level { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AttackType { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SelectorType { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<fb.C_SkillDataTR> CreateC_SkillDataTR(FlatBufferBuilder builder,
      int _id = 0,
      StringOffset NameOffset = default(StringOffset),
      StringOffset DescriptionOffset = default(StringOffset),
      int CoolTime = 0,
      int CostSP = 0,
      float AttackDistance = 0.0f,
      float AttackAngle = 0.0f,
      VectorOffset AttackTargetTagsOffset = default(VectorOffset),
      VectorOffset ImpactTypeOffset = default(VectorOffset),
      int NextBattlerId = 0,
      float AtkRatio = 0.0f,
      float DurationTime = 0.0f,
      float AtkInterval = 0.0f,
      StringOffset SkillPrefabOffset = default(StringOffset),
      StringOffset AnimationNameOffset = default(StringOffset),
      StringOffset HitFxPrefabOffset = default(StringOffset),
      int Level = 0,
      int AttackType = 0,
      int SelectorType = 0) {
    builder.StartTable(19);
    C_SkillDataTR.AddSelectorType(builder, SelectorType);
    C_SkillDataTR.AddAttackType(builder, AttackType);
    C_SkillDataTR.AddLevel(builder, Level);
    C_SkillDataTR.AddHitFxPrefab(builder, HitFxPrefabOffset);
    C_SkillDataTR.AddAnimationName(builder, AnimationNameOffset);
    C_SkillDataTR.AddSkillPrefab(builder, SkillPrefabOffset);
    C_SkillDataTR.AddAtkInterval(builder, AtkInterval);
    C_SkillDataTR.AddDurationTime(builder, DurationTime);
    C_SkillDataTR.AddAtkRatio(builder, AtkRatio);
    C_SkillDataTR.AddNextBattlerId(builder, NextBattlerId);
    C_SkillDataTR.AddImpactType(builder, ImpactTypeOffset);
    C_SkillDataTR.AddAttackTargetTags(builder, AttackTargetTagsOffset);
    C_SkillDataTR.AddAttackAngle(builder, AttackAngle);
    C_SkillDataTR.AddAttackDistance(builder, AttackDistance);
    C_SkillDataTR.AddCostSP(builder, CostSP);
    C_SkillDataTR.AddCoolTime(builder, CoolTime);
    C_SkillDataTR.AddDescription(builder, DescriptionOffset);
    C_SkillDataTR.AddName(builder, NameOffset);
    C_SkillDataTR.Add_id(builder, _id);
    return C_SkillDataTR.EndC_SkillDataTR(builder);
  }

  public static void StartC_SkillDataTR(FlatBufferBuilder builder) { builder.StartTable(19); }
  public static void Add_id(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset DescriptionOffset) { builder.AddOffset(2, DescriptionOffset.Value, 0); }
  public static void AddCoolTime(FlatBufferBuilder builder, int CoolTime) { builder.AddInt(3, CoolTime, 0); }
  public static void AddCostSP(FlatBufferBuilder builder, int CostSP) { builder.AddInt(4, CostSP, 0); }
  public static void AddAttackDistance(FlatBufferBuilder builder, float AttackDistance) { builder.AddFloat(5, AttackDistance, 0.0f); }
  public static void AddAttackAngle(FlatBufferBuilder builder, float AttackAngle) { builder.AddFloat(6, AttackAngle, 0.0f); }
  public static void AddAttackTargetTags(FlatBufferBuilder builder, VectorOffset AttackTargetTagsOffset) { builder.AddOffset(7, AttackTargetTagsOffset.Value, 0); }
  public static VectorOffset CreateAttackTargetTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAttackTargetTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAttackTargetTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddImpactType(FlatBufferBuilder builder, VectorOffset ImpactTypeOffset) { builder.AddOffset(8, ImpactTypeOffset.Value, 0); }
  public static VectorOffset CreateImpactTypeVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateImpactTypeVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartImpactTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNextBattlerId(FlatBufferBuilder builder, int NextBattlerId) { builder.AddInt(9, NextBattlerId, 0); }
  public static void AddAtkRatio(FlatBufferBuilder builder, float AtkRatio) { builder.AddFloat(10, AtkRatio, 0.0f); }
  public static void AddDurationTime(FlatBufferBuilder builder, float DurationTime) { builder.AddFloat(11, DurationTime, 0.0f); }
  public static void AddAtkInterval(FlatBufferBuilder builder, float AtkInterval) { builder.AddFloat(12, AtkInterval, 0.0f); }
  public static void AddSkillPrefab(FlatBufferBuilder builder, StringOffset SkillPrefabOffset) { builder.AddOffset(13, SkillPrefabOffset.Value, 0); }
  public static void AddAnimationName(FlatBufferBuilder builder, StringOffset AnimationNameOffset) { builder.AddOffset(14, AnimationNameOffset.Value, 0); }
  public static void AddHitFxPrefab(FlatBufferBuilder builder, StringOffset HitFxPrefabOffset) { builder.AddOffset(15, HitFxPrefabOffset.Value, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int Level) { builder.AddInt(16, Level, 0); }
  public static void AddAttackType(FlatBufferBuilder builder, int AttackType) { builder.AddInt(17, AttackType, 0); }
  public static void AddSelectorType(FlatBufferBuilder builder, int SelectorType) { builder.AddInt(18, SelectorType, 0); }
  public static Offset<fb.C_SkillDataTR> EndC_SkillDataTR(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<fb.C_SkillDataTR>(o);
  }
};


}
